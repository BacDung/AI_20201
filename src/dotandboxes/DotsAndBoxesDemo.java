
import java.awt.Color;
import java.util.Random;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dell
 */
public class DotsAndBoxesDemo extends javax.swing.JFrame {
    int[][] hEdge;
    int[][] vEdge;
    int countStep;
    int turn;
    Chessboard chessboard;
    AlphaBetaSolver solver;

    /**
     * Creates new form DotsAndBoxesDemo
     */
    public DotsAndBoxesDemo() {
        this.hEdge = new int[][]{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}};
        this.vEdge = new int[][]{{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}};
        this.countStep = 40;
        this.turn = 0;
        this.chessboard = new Chessboard(5);
        solver = new AlphaBetaSolver();
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hEdge00 = new javax.swing.JButton();
        hEdge01 = new javax.swing.JButton();
        hEdge02 = new javax.swing.JButton();
        vEdge00 = new javax.swing.JButton();
        vEdge01 = new javax.swing.JButton();
        vEdge02 = new javax.swing.JButton();
        vEdge03 = new javax.swing.JButton();
        hEdge10 = new javax.swing.JButton();
        hEdge11 = new javax.swing.JButton();
        hEdge12 = new javax.swing.JButton();
        vEdge10 = new javax.swing.JButton();
        vEdge11 = new javax.swing.JButton();
        vEdge12 = new javax.swing.JButton();
        vEdge13 = new javax.swing.JButton();
        hEdge20 = new javax.swing.JButton();
        hEdge21 = new javax.swing.JButton();
        hEdge22 = new javax.swing.JButton();
        vEdge20 = new javax.swing.JButton();
        vEdge21 = new javax.swing.JButton();
        vEdge22 = new javax.swing.JButton();
        vEdge23 = new javax.swing.JButton();
        hEdge30 = new javax.swing.JButton();
        hEdge31 = new javax.swing.JButton();
        hEdge32 = new javax.swing.JButton();
        player1Label = new javax.swing.JLabel();
        point1Label = new javax.swing.JLabel();
        player2Label = new javax.swing.JLabel();
        point2Label = new javax.swing.JLabel();
        turnLabel = new javax.swing.JLabel();
        box00 = new javax.swing.JTextField();
        box01 = new javax.swing.JTextField();
        box02 = new javax.swing.JTextField();
        box10 = new javax.swing.JTextField();
        box11 = new javax.swing.JTextField();
        box12 = new javax.swing.JTextField();
        box20 = new javax.swing.JTextField();
        box21 = new javax.swing.JTextField();
        box22 = new javax.swing.JTextField();
        hEdge03 = new javax.swing.JButton();
        vEdge04 = new javax.swing.JButton();
        hEdge13 = new javax.swing.JButton();
        vEdge14 = new javax.swing.JButton();
        hEdge23 = new javax.swing.JButton();
        vEdge24 = new javax.swing.JButton();
        hEdge33 = new javax.swing.JButton();
        vEdge30 = new javax.swing.JButton();
        hEdge40 = new javax.swing.JButton();
        vEdge31 = new javax.swing.JButton();
        hEdge41 = new javax.swing.JButton();
        vEdge32 = new javax.swing.JButton();
        hEdge42 = new javax.swing.JButton();
        vEdge33 = new javax.swing.JButton();
        hEdge43 = new javax.swing.JButton();
        vEdge34 = new javax.swing.JButton();
        box03 = new javax.swing.JTextField();
        box13 = new javax.swing.JTextField();
        box23 = new javax.swing.JTextField();
        box30 = new javax.swing.JTextField();
        box31 = new javax.swing.JTextField();
        box32 = new javax.swing.JTextField();
        box33 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dots and Boxes");
        setPreferredSize(new java.awt.Dimension(900, 700));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        hEdge00.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge00.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge00ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge00, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, -1, -1));

        hEdge01.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge01.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge01ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge01, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, -1, -1));

        hEdge02.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge02.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge02ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge02, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, -1, -1));

        vEdge00.setToolTipText("");
        vEdge00.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge00.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge00ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge00, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, -1, -1));

        vEdge01.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge01.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge01ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge01, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, -1, -1));

        vEdge02.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge02.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge02ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge02, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 60, -1, -1));

        vEdge03.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge03.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge03ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge03, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 60, -1, -1));

        hEdge10.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge10ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge10, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, -1, -1));

        hEdge11.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge11ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge11, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, -1, -1));

        hEdge12.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge12ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge12, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 160, -1, -1));

        vEdge10.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge10ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge10, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, -1, -1));

        vEdge11.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge11ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge11, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 170, -1, -1));

        vEdge12.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge12ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge12, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 170, -1, -1));

        vEdge13.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge13ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge13, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 170, -1, -1));

        hEdge20.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge20ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge20, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 270, -1, -1));

        hEdge21.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge21ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge21, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 270, -1, -1));

        hEdge22.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge22ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge22, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 270, -1, -1));

        vEdge20.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge20ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge20, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, -1, -1));

        vEdge21.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge21ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge21, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, -1, -1));

        vEdge22.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge22ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge22, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 280, -1, -1));

        vEdge23.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge23ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge23, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 280, -1, -1));

        hEdge30.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge30ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge30, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 380, -1, -1));

        hEdge31.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge31ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge31, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 380, -1, -1));

        hEdge32.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge32ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge32, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 380, -1, -1));

        player1Label.setForeground(new java.awt.Color(51, 0, 204));
        player1Label.setText("Người chơi 1:");
        player1Label.setToolTipText("");
        getContentPane().add(player1Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 270, -1, -1));

        point1Label.setText("0");
        getContentPane().add(point1Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 270, -1, -1));

        player2Label.setForeground(new java.awt.Color(255, 0, 51));
        player2Label.setText("Người chơi 2:");
        getContentPane().add(player2Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 330, -1, -1));

        point2Label.setText("0");
        getContentPane().add(point2Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 330, -1, -1));

        turnLabel.setForeground(new java.awt.Color(0, 0, 204));
        turnLabel.setText("Lượt của người chơi 1");
        getContentPane().add(turnLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 130, -1, -1));

        box00.setEditable(false);
        getContentPane().add(box00, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 100, 100));

        box01.setEditable(false);
        getContentPane().add(box01, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, 100, 100));

        box02.setEditable(false);
        getContentPane().add(box02, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 60, 100, 100));

        box10.setEditable(false);
        getContentPane().add(box10, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 100, 100));

        box11.setEditable(false);
        getContentPane().add(box11, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 170, 100, 100));

        box12.setEditable(false);
        getContentPane().add(box12, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 170, 100, 100));

        box20.setEditable(false);
        getContentPane().add(box20, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, 100, 100));

        box21.setEditable(false);
        getContentPane().add(box21, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 280, 100, 100));

        box22.setEditable(false);
        getContentPane().add(box22, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 280, 100, 100));

        hEdge03.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge03.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge03ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge03, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 50, -1, -1));

        vEdge04.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge04.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge04ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge04, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 60, -1, -1));

        hEdge13.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge13ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge13, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 160, -1, -1));

        vEdge14.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge14ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge14, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 170, -1, -1));

        hEdge23.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge23ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge23, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 270, -1, -1));

        vEdge24.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge24ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge24, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 280, -1, -1));

        hEdge33.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge33ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge33, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 380, -1, -1));

        vEdge30.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge30ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge30, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 390, -1, -1));

        hEdge40.setToolTipText("");
        hEdge40.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge40ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge40, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 490, -1, -1));

        vEdge31.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge31ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge31, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 390, -1, -1));

        hEdge41.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge41ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge41, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 490, -1, -1));

        vEdge32.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge32ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge32, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 390, -1, -1));

        hEdge42.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge42ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge42, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 490, -1, -1));

        vEdge33.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge33ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge33, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 390, -1, -1));

        hEdge43.setPreferredSize(new java.awt.Dimension(100, 10));
        hEdge43.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEdge43ActionPerformed(evt);
            }
        });
        getContentPane().add(hEdge43, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 490, -1, -1));

        vEdge34.setPreferredSize(new java.awt.Dimension(12, 100));
        vEdge34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vEdge34ActionPerformed(evt);
            }
        });
        getContentPane().add(vEdge34, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 390, -1, -1));

        box03.setEditable(false);
        box03.setBackground(new java.awt.Color(240, 240, 240));
        getContentPane().add(box03, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 60, 100, 100));

        box13.setEditable(false);
        box13.setBackground(new java.awt.Color(240, 240, 240));
        getContentPane().add(box13, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 170, 100, 100));

        box23.setEditable(false);
        box23.setBackground(new java.awt.Color(240, 240, 240));
        getContentPane().add(box23, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 280, 100, 100));

        box30.setEditable(false);
        box30.setBackground(new java.awt.Color(240, 240, 240));
        getContentPane().add(box30, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 390, 100, 100));

        box31.setEditable(false);
        box31.setBackground(new java.awt.Color(240, 240, 240));
        getContentPane().add(box31, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 390, 100, 100));

        box32.setEditable(false);
        box32.setBackground(new java.awt.Color(240, 240, 240));
        getContentPane().add(box32, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 390, 100, 100));

        box33.setEditable(false);
        box33.setBackground(new java.awt.Color(240, 240, 240));
        getContentPane().add(box33, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 390, 100, 100));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void checkEndGame() {
        if (countStep == 0) {
            String result = "Trò chơi đã kết thúc!\n Điểm của người chơi 1: " + point1Label.getText() + ".\nĐiểm của người chơi 2: " + point2Label.getText() + ".\nNgười chơi " + ((Integer.parseInt(point1Label.getText()) > Integer.parseInt(point2Label.getText())) ? "1" : "2") + " chiến thắng.";
            JOptionPane.showMessageDialog(this, result, "Kết quả", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    public boolean noBox(int i, int j) {
        if (hEdge[i][j] == 1 && hEdge[i + 1][j] == 1 && vEdge[i][j] == 1 && vEdge[i][j + 1] == 1) {
            score();
            updateBox(turn, i, j);
            return false;
        }
        return true;
    }
    
    public void score() {
        if (turn == 0) {
            point1Label.setText(String.valueOf(Integer.parseInt(point1Label.getText()) + 1));
        } else {
            point2Label.setText(String.valueOf(Integer.parseInt(point2Label.getText()) + 1));
        }
    }
    
    public void updateBox(int turn, int i, int j) {
        Color color = (turn == 0) ? Color.BLUE : Color.RED;
        switch (i) {
            case 0:
                switch (j) {
                    case 0: box00.setBackground(color); break;
                    case 1: box01.setBackground(color); break;
                    case 2: box02.setBackground(color); break;
                    default:box03.setBackground(color); break;
                }
                break;
            case 1:
                switch (j) {
                    case 0: box10.setBackground(color); break;
                    case 1: box11.setBackground(color); break;
                    case 2: box12.setBackground(color); break;
                    default:box13.setBackground(color); break;
                }
                break;
            case 2:
                switch (j) {
                    case 0: box20.setBackground(color); break;
                    case 1: box21.setBackground(color); break;
                    case 2: box22.setBackground(color); break;
                    default:box23.setBackground(color); break;
                }
                break;
            default:
                switch (j) {
                    case 0: box30.setBackground(color); break;
                    case 1: box31.setBackground(color); break;
                    case 2: box32.setBackground(color); break;
                    default:box33.setBackground(color); break;
                }
                break;
        }
    }
    
    public void passTurn() {
        turn = 1 - turn;
        turnLabel.setText("Lượt của người chơi " + String.valueOf(turn + 1));
        turnLabel.setForeground((turn == 0) ? Color.BLUE : Color.RED);
    }
    
    public void botMove() {
        while(turn == 1) {
            boolean a, b;
            int resultX, resultY, resultDirection;
            Edge e = solver.getNextMove(chessboard, 0);
            resultDirection = e.isHorizontal() ? 0 : 1;
            resultX = e.getY();
            resultY = e.getX();
            switch (resultDirection) {
                case 0:
                    switch (resultX) {
                        case 0:
                            switch (resultY) {
                                case 0:
                                    hEdge[0][0] = 1;
                                    chessboard.chooseEdge(0, 0, 0, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge00.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(0, 0)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 1:
                                    hEdge[0][1] = 1;
                                    chessboard.chooseEdge(0, 1, 0, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge01.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(0, 1)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 2:
                                    hEdge[0][2] = 1;
                                    chessboard.chooseEdge(0, 2, 0, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge02.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(0, 2)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                default:
                                    hEdge[0][3] = 1;
                                    chessboard.chooseEdge(0, 3, 0, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge03.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(0, 3)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                            }
                            break;
                        case 1:
                            switch (resultY) {
                                case 0:
                                    hEdge[1][0] = 1;
                                    chessboard.chooseEdge(0, 0, 1, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge10.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(0, 0);
                                    b = noBox(1, 0);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 1:
                                    hEdge[1][1] = 1;
                                    chessboard.chooseEdge(0, 1, 1, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge11.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(0, 1);
                                    b = noBox(1, 1);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 2:
                                    hEdge[1][2] = 1;
                                    chessboard.chooseEdge(0, 2, 1, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge12.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(0, 2);
                                    b = noBox(1, 2);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                default:
                                    hEdge[1][3] = 1;
                                    chessboard.chooseEdge(0, 3, 1, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge13.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(0, 3);
                                    b = noBox(1, 3);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                            }
                            break;
                        case 2:
                            switch (resultY) {
                                case 0:
                                    hEdge[2][0] = 1;
                                    chessboard.chooseEdge(0, 0, 2, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge20.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(1, 0);
                                    b = noBox(2, 0);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 1:
                                    hEdge[2][1] = 1;
                                    chessboard.chooseEdge(0, 1, 2, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge21.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(1, 1);
                                    b = noBox(2, 1);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 2:
                                    hEdge[2][2] = 1;
                                    chessboard.chooseEdge(0, 2, 2, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge22.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(1, 2);
                                    b = noBox(2, 2);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                    
                                default:
                                    hEdge[2][3] = 1;
                                    chessboard.chooseEdge(0, 3, 2, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge23.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(1, 3);
                                    b = noBox(2, 3);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                            }
                            break;
                        case 3:
                            switch (resultY) {
                                case 0:
                                    hEdge[3][0] = 1;
                                    chessboard.chooseEdge(0, 0, 3, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge30.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(2, 0);
                                    b = noBox(3, 0);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 1:
                                    hEdge[3][1] = 1;
                                    chessboard.chooseEdge(0, 1, 3, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge31.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(2, 1);
                                    b = noBox(3, 1);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 2:
                                    hEdge[3][2] = 1;
                                    chessboard.chooseEdge(0, 2, 3, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge32.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(2, 2);
                                    b = noBox(3, 2);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                default:
                                    hEdge[3][3] = 1;
                                    chessboard.chooseEdge(0, 3, 3, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge33.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(2, 3);
                                    b = noBox(3, 3);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                            }
                            break;
                        default:
                            switch (resultY) {
                                case 0:
                                    hEdge[4][0] = 1;
                                    chessboard.chooseEdge(0, 0, 4, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge40.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(3, 0)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 1:
                                    hEdge[4][1] = 1;
                                    chessboard.chooseEdge(0, 1, 4, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge41.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(3, 1)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 2:
                                    hEdge[4][2] = 1;
                                    chessboard.chooseEdge(0, 2, 4, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge42.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(3, 2)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                default:
                                    hEdge[4][3] = 1;
                                    chessboard.chooseEdge(0, 3, 4, 0);
                                    chessboard.updateBox(1 - turn);
                                    hEdge43.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(3, 3)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                            }
                            break;
                    }
                    break;
                default:
                    switch (resultX) {
                        case 0:
                            switch (resultY) {
                                case 0:
                                    vEdge[0][0] = 1;
                                    chessboard.chooseEdge(1, 0, 0, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge00.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(0, 0)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 1:
                                    vEdge[0][1] = 1;
                                    chessboard.chooseEdge(1, 1, 0, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge01.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(0, 0);
                                    b = noBox(0, 1);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 2:
                                    vEdge[0][2] = 1;
                                    chessboard.chooseEdge(1, 2, 0, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge02.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(0, 1);
                                    b = noBox(0, 2);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 3:
                                    vEdge[0][3] = 1;
                                    chessboard.chooseEdge(1, 3, 0, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge03.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(0, 2);
                                    b = noBox(0, 3);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                default:
                                    vEdge[0][4] = 1;
                                    chessboard.chooseEdge(1, 4, 0, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge04.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(0, 3)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                            }
                            break;
                        case 1:
                            switch (resultY) {
                                case 0:
                                    vEdge[1][0] = 1;
                                    chessboard.chooseEdge(1, 0, 1, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge10.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(1, 0)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 1:
                                    vEdge[1][1] = 1;
                                    chessboard.chooseEdge(1, 1, 1, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge11.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(1, 0);
                                    b = noBox(1, 1);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 2:
                                    vEdge[1][2] = 1;
                                    chessboard.chooseEdge(1, 2, 1, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge12.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(1, 1);
                                    b = noBox(1, 2);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 3:
                                    vEdge[1][3] = 1;
                                    chessboard.chooseEdge(1, 3, 1, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge13.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(1, 2);
                                    b = noBox(1, 3);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                default:
                                    vEdge[1][4] = 1;
                                    chessboard.chooseEdge(1, 4, 1, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge14.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(1, 3)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                            }
                            break;
                        case 2:
                            switch (resultY) {
                                case 0:
                                    vEdge[2][0] = 1;
                                    chessboard.chooseEdge(1, 0, 2, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge20.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(2, 0)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 1:
                                    vEdge[2][1] = 1;
                                    chessboard.chooseEdge(1, 1, 2, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge21.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(2, 0);
                                    b = noBox(2, 1);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 2:
                                    vEdge[2][2] = 1;
                                    chessboard.chooseEdge(1, 2, 2, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge22.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(2, 1);
                                    b = noBox(2, 2);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 3:
                                    vEdge[2][3] = 1;
                                    chessboard.chooseEdge(1, 3, 2, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge23.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(2, 2);
                                    b = noBox(2, 3);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                default:
                                    vEdge[2][4] = 1;
                                    chessboard.chooseEdge(1, 4, 2, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge24.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(2, 3)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                            }
                            break;
                        default:
                            switch (resultY) {
                                case 0:
                                    vEdge[3][0] = 1;
                                    chessboard.chooseEdge(1, 0, 3, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge30.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(3, 0)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 1:
                                    vEdge[3][1] = 1;
                                    chessboard.chooseEdge(1, 1, 3, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge31.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(3, 0);
                                    b = noBox(3, 1);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 2:
                                    vEdge[3][2] = 1;
                                    chessboard.chooseEdge(1, 2, 3, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge32.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(3, 1);
                                    b = noBox(3, 2);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                case 3:
                                    vEdge[3][3] = 1;
                                    chessboard.chooseEdge(1, 3, 3, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge33.setBackground(Color.RED);
                                    countStep--;
                                    a = noBox(3, 2);
                                    b = noBox(3, 3);
                                    if (a && b) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                                default:
                                    vEdge[3][4] = 1;
                                    chessboard.chooseEdge(1, 4, 3, 0);
                                    chessboard.updateBox(1 - turn);
                                    vEdge34.setBackground(Color.RED);
                                    countStep--;
                                    if (noBox(3, 3)) {
                                        passTurn();
                                    }
                                    checkEndGame();
                                    break;
                            }
                            break;
                    }
                    break;
            }
        }
    }
    
    private void hEdge00ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge00ActionPerformed
        if (hEdge[0][0] == 0) {
            hEdge[0][0] = 1;
            chessboard.chooseEdge(0, 0, 0, 1);
            chessboard.updateBox(1 - turn);
            hEdge00.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(0, 0)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge00ActionPerformed

    private void hEdge01ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge01ActionPerformed
        if (hEdge[0][1] == 0) {
            hEdge[0][1] = 1;
            chessboard.chooseEdge(0, 1, 0, 1);
            chessboard.updateBox(1 - turn);
            hEdge01.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(0, 1)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge01ActionPerformed

    private void hEdge02ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge02ActionPerformed
        if (hEdge[0][2] == 0) {
            hEdge[0][2] = 1;
            chessboard.chooseEdge(0, 2, 0, 1);
            chessboard.updateBox(1 - turn);
            hEdge02.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(0, 2)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge02ActionPerformed

    private void hEdge10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge10ActionPerformed
        if (hEdge[1][0] == 0) {
            hEdge[1][0] = 1;
            chessboard.chooseEdge(0, 0, 1, 1);
            chessboard.updateBox(1 - turn);
            hEdge10.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(0, 0), b = noBox(1, 0);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge10ActionPerformed

    private void hEdge11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge11ActionPerformed
        if (hEdge[1][1] == 0) {
            hEdge[1][1] = 1;
            chessboard.chooseEdge(0, 1, 1, 1);
            chessboard.updateBox(1 - turn);
            hEdge11.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(0, 1), b = noBox(1, 1);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge11ActionPerformed

    private void hEdge12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge12ActionPerformed
        if (hEdge[1][2] == 0) {
            hEdge[1][2] = 1;
            chessboard.chooseEdge(0, 2, 1, 1);
            chessboard.updateBox(1 - turn);
            hEdge12.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(0, 2), b = noBox(1, 2);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge12ActionPerformed

    private void hEdge20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge20ActionPerformed
        if (hEdge[2][0] == 0) {
            hEdge[2][0] = 1;
            chessboard.chooseEdge(0, 0, 2, 1);
            chessboard.updateBox(1 - turn);
            hEdge20.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(1, 0), b = noBox(2, 0);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge20ActionPerformed

    private void hEdge21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge21ActionPerformed
        if (hEdge[2][1] == 0) {
            hEdge[2][1] = 1;
            chessboard.chooseEdge(0, 1, 2, 1);
            chessboard.updateBox(1 - turn);
            hEdge21.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(1, 1), b = noBox(2, 1);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge21ActionPerformed

    private void hEdge22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge22ActionPerformed
        if (hEdge[2][2] == 0) {
            hEdge[2][2] = 1;
            chessboard.chooseEdge(0, 2, 2, 1);
            chessboard.updateBox(1 - turn);
            hEdge22.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(1, 2), b = noBox(2, 2);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge22ActionPerformed

    private void hEdge30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge30ActionPerformed
        if (hEdge[3][0] == 0) {
            hEdge[3][0] = 1;
            chessboard.chooseEdge(0, 0, 3, 1);
            chessboard.updateBox(1 - turn);
            hEdge30.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(2, 0), b = noBox(3, 0);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge30ActionPerformed

    private void hEdge31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge31ActionPerformed
        if (hEdge[3][1] == 0) {
            hEdge[3][1] = 1;
            chessboard.chooseEdge(0, 1, 3, 1);
            chessboard.updateBox(1 - turn);
            hEdge31.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(2, 1), b = noBox(3, 1);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge31ActionPerformed

    private void hEdge32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge32ActionPerformed
        if (hEdge[3][2] == 0) {
            hEdge[3][2] = 1;
            chessboard.chooseEdge(0, 2, 3, 1);
            chessboard.updateBox(1 - turn);
            hEdge32.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(2, 2), b = noBox(3, 2);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge32ActionPerformed

    private void vEdge00ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge00ActionPerformed
        if (vEdge[0][0] == 0) {
            vEdge[0][0] = 1;
            chessboard.chooseEdge(1, 0, 0, 1);
            chessboard.updateBox(1 - turn);
            vEdge00.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(0, 0)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge00ActionPerformed

    private void vEdge01ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge01ActionPerformed
        if (vEdge[0][1] == 0) {
            vEdge[0][1] = 1;
            chessboard.chooseEdge(1, 1, 0, 1);
            chessboard.updateBox(1 - turn);
            vEdge01.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(0, 0), b = noBox(0, 1);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge01ActionPerformed

    private void vEdge02ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge02ActionPerformed
        if (vEdge[0][2] == 0) {
            vEdge[0][2] = 1;
            chessboard.chooseEdge(1, 2, 0, 1);
            chessboard.updateBox(1 - turn);
            vEdge02.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(0, 1), b = noBox(0, 2);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge02ActionPerformed

    private void vEdge03ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge03ActionPerformed
        if (vEdge[0][3] == 0) {
            vEdge[0][3] = 1;
            chessboard.chooseEdge(1, 3, 0, 1);
            chessboard.updateBox(1 - turn);
            vEdge03.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(0, 2), b = noBox(0, 3);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge03ActionPerformed

    private void vEdge10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge10ActionPerformed
        if (vEdge[1][0] == 0) {
            vEdge[1][0] = 1;
            chessboard.chooseEdge(1, 0, 1, 1);
            chessboard.updateBox(1 - turn);
            vEdge10.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(1, 0)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge10ActionPerformed

    private void vEdge11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge11ActionPerformed
        if (vEdge[1][1] == 0) {
            vEdge[1][1] = 1;
            chessboard.chooseEdge(1, 1, 1, 1);
            chessboard.updateBox(1 - turn);
            vEdge11.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(1, 0), b = noBox(1, 1);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge11ActionPerformed

    private void vEdge12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge12ActionPerformed
        if (vEdge[1][2] == 0) {
            vEdge[1][2] = 1;
            chessboard.chooseEdge(1, 2, 1, 1);
            chessboard.updateBox(1 - turn);
            vEdge12.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(1, 1), b = noBox(1, 2);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge12ActionPerformed

    private void vEdge13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge13ActionPerformed
        if (vEdge[1][3] == 0) {
            vEdge[1][3] = 1;
            chessboard.chooseEdge(1, 3, 1, 1);
            chessboard.updateBox(1 - turn);
            vEdge13.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(1, 2), b = noBox(1, 3);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge13ActionPerformed

    private void vEdge20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge20ActionPerformed
        if (vEdge[2][0] == 0) {
            vEdge[2][0] = 1;
            chessboard.chooseEdge(1, 0, 2, 1);
            chessboard.updateBox(1 - turn);
            vEdge20.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(2, 0)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge20ActionPerformed

    private void vEdge21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge21ActionPerformed
        if (vEdge[2][1] == 0) {
            vEdge[2][1] = 1;
            chessboard.chooseEdge(1, 1, 2, 1);
            chessboard.updateBox(1 - turn);
            vEdge21.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(2, 0), b = noBox(2, 1);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge21ActionPerformed

    private void vEdge22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge22ActionPerformed
        if (vEdge[2][2] == 0) {
            vEdge[2][2] = 1;
            chessboard.chooseEdge(1, 2, 2, 1);
            chessboard.updateBox(1 - turn);
            vEdge22.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(2, 1), b = noBox(2, 2);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge22ActionPerformed

    private void vEdge23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge23ActionPerformed
        if (vEdge[2][3] == 0) {
            vEdge[2][3] = 1;
            chessboard.chooseEdge(1, 3, 2, 1);
            chessboard.updateBox(1 - turn);
            vEdge23.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(2, 2), b = noBox(2, 3);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge23ActionPerformed

    private void hEdge03ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge03ActionPerformed
        if (hEdge[0][3] == 0) {
            hEdge[0][3] = 1;
            chessboard.chooseEdge(0, 3, 0, 1);
            chessboard.updateBox(1 - turn);
            hEdge03.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(0, 3)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge03ActionPerformed

    private void hEdge13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge13ActionPerformed
        if (hEdge[1][3] == 0) {
            hEdge[1][3] = 1;
            chessboard.chooseEdge(0, 3, 1, 1);
            chessboard.updateBox(1 - turn);
            hEdge13.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(0, 3), b = noBox(1, 3);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge13ActionPerformed

    private void hEdge23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge23ActionPerformed
        if (hEdge[2][3] == 0) {
            hEdge[2][3] = 1;
            chessboard.chooseEdge(0, 3, 2, 1);
            chessboard.updateBox(1 - turn);
            hEdge23.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(1, 3), b = noBox(2, 3);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge23ActionPerformed

    private void hEdge33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge33ActionPerformed
        if (hEdge[3][3] == 0) {
            hEdge[3][3] = 1;
            chessboard.chooseEdge(0, 3, 3, 1);
            chessboard.updateBox(1 - turn);
            hEdge33.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(2, 3), b = noBox(3, 3);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge33ActionPerformed

    private void hEdge40ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge40ActionPerformed
        if (hEdge[4][0] == 0) {
            hEdge[4][0] = 1;
            chessboard.chooseEdge(0, 0, 4, 1);
            chessboard.updateBox(1 - turn);
            hEdge40.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(3, 0)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge40ActionPerformed

    private void hEdge41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge41ActionPerformed
        if (hEdge[4][1] == 0) {
            hEdge[4][1] = 1;
            chessboard.chooseEdge(0, 1, 4, 1);
            chessboard.updateBox(1 - turn);
            hEdge41.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(3, 1)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge41ActionPerformed

    private void hEdge42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge42ActionPerformed
        if (hEdge[4][2] == 0) {
            hEdge[4][2] = 1;
            chessboard.chooseEdge(0, 2, 4, 1);
            chessboard.updateBox(1 - turn);
            hEdge42.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(3, 2)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge42ActionPerformed

    private void hEdge43ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEdge43ActionPerformed
        if (hEdge[4][3] == 0) {
            hEdge[4][3] = 1;
            chessboard.chooseEdge(0, 3, 4, 1);
            chessboard.updateBox(1 - turn);
            hEdge43.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(3, 3)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_hEdge43ActionPerformed

    private void vEdge04ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge04ActionPerformed
        if (vEdge[0][4] == 0) {
            vEdge[0][4] = 1;
            chessboard.chooseEdge(1, 4, 0, 1);
            chessboard.updateBox(1 - turn);
            vEdge04.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(0, 3)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge04ActionPerformed

    private void vEdge14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge14ActionPerformed
        if (vEdge[1][4] == 0) {
            vEdge[1][4] = 1;
            chessboard.chooseEdge(1, 4, 1, 1);
            chessboard.updateBox(1 - turn);
            vEdge14.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(1, 3)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge14ActionPerformed

    private void vEdge24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge24ActionPerformed
        if (vEdge[2][4] == 0) {
            vEdge[2][4] = 1;
            chessboard.chooseEdge(1, 4, 2, 1);
            chessboard.updateBox(1 - turn);
            vEdge24.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(2, 3)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge24ActionPerformed

    private void vEdge34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge34ActionPerformed
        if (vEdge[3][4] == 0) {
            vEdge[3][4] = 1;
            chessboard.chooseEdge(1, 4, 3, 1);
            chessboard.updateBox(1 - turn);
            vEdge34.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(3, 3)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge34ActionPerformed

    private void vEdge30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge30ActionPerformed
        if (vEdge[3][0] == 0) {
            vEdge[3][0] = 1;
            chessboard.chooseEdge(1, 0, 3, 1);
            chessboard.updateBox(1 - turn);
            vEdge30.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            if (noBox(3, 0)) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge30ActionPerformed

    private void vEdge31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge31ActionPerformed
        if (vEdge[3][1] == 0) {
            vEdge[3][1] = 1;
            chessboard.chooseEdge(1, 1, 3, 1);
            chessboard.updateBox(1 - turn);
            vEdge31.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(3, 0), b = noBox(3, 1);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge31ActionPerformed

    private void vEdge32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge32ActionPerformed
        if (vEdge[3][2] == 0) {
            vEdge[3][2] = 1;
            chessboard.chooseEdge(1, 2, 3, 1);
            chessboard.updateBox(1 - turn);
            vEdge32.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(3, 1), b = noBox(3, 2);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge32ActionPerformed

    private void vEdge33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vEdge33ActionPerformed
        if (vEdge[3][3] == 0) {
            vEdge[3][3] = 1;
            chessboard.chooseEdge(1, 3, 3, 1);
            chessboard.updateBox(1 - turn);
            vEdge33.setBackground((turn == 0) ? Color.BLUE : Color.RED);
            countStep--;
            boolean a = noBox(3, 2), b = noBox(3, 3);
            if (a && b) {
                passTurn();
            }
            checkEndGame();
            if (countStep > 0 && turn == 1) {
                botMove();
            }
        }
    }//GEN-LAST:event_vEdge33ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DotsAndBoxesDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DotsAndBoxesDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DotsAndBoxesDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DotsAndBoxesDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DotsAndBoxesDemo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField box00;
    private javax.swing.JTextField box01;
    private javax.swing.JTextField box02;
    private javax.swing.JTextField box03;
    private javax.swing.JTextField box10;
    private javax.swing.JTextField box11;
    private javax.swing.JTextField box12;
    private javax.swing.JTextField box13;
    private javax.swing.JTextField box20;
    private javax.swing.JTextField box21;
    private javax.swing.JTextField box22;
    private javax.swing.JTextField box23;
    private javax.swing.JTextField box30;
    private javax.swing.JTextField box31;
    private javax.swing.JTextField box32;
    private javax.swing.JTextField box33;
    private javax.swing.JButton hEdge00;
    private javax.swing.JButton hEdge01;
    private javax.swing.JButton hEdge02;
    private javax.swing.JButton hEdge03;
    private javax.swing.JButton hEdge10;
    private javax.swing.JButton hEdge11;
    private javax.swing.JButton hEdge12;
    private javax.swing.JButton hEdge13;
    private javax.swing.JButton hEdge20;
    private javax.swing.JButton hEdge21;
    private javax.swing.JButton hEdge22;
    private javax.swing.JButton hEdge23;
    private javax.swing.JButton hEdge30;
    private javax.swing.JButton hEdge31;
    private javax.swing.JButton hEdge32;
    private javax.swing.JButton hEdge33;
    private javax.swing.JButton hEdge40;
    private javax.swing.JButton hEdge41;
    private javax.swing.JButton hEdge42;
    private javax.swing.JButton hEdge43;
    private javax.swing.JLabel player1Label;
    private javax.swing.JLabel player2Label;
    private javax.swing.JLabel point1Label;
    private javax.swing.JLabel point2Label;
    private javax.swing.JLabel turnLabel;
    private javax.swing.JButton vEdge00;
    private javax.swing.JButton vEdge01;
    private javax.swing.JButton vEdge02;
    private javax.swing.JButton vEdge03;
    private javax.swing.JButton vEdge04;
    private javax.swing.JButton vEdge10;
    private javax.swing.JButton vEdge11;
    private javax.swing.JButton vEdge12;
    private javax.swing.JButton vEdge13;
    private javax.swing.JButton vEdge14;
    private javax.swing.JButton vEdge20;
    private javax.swing.JButton vEdge21;
    private javax.swing.JButton vEdge22;
    private javax.swing.JButton vEdge23;
    private javax.swing.JButton vEdge24;
    private javax.swing.JButton vEdge30;
    private javax.swing.JButton vEdge31;
    private javax.swing.JButton vEdge32;
    private javax.swing.JButton vEdge33;
    private javax.swing.JButton vEdge34;
    // End of variables declaration//GEN-END:variables
}
